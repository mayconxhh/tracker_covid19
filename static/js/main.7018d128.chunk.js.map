{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","initialData","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChar","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7018d128.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2jh_t\",\"card\":\"Cards_card__3vQYf\",\"infected\":\"Cards_infected__3dC-q\",\"recovered\":\"Cards_recovered__X87k9\",\"deaths\":\"Cards_deaths__-7BwM\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\n\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate }}) => {\r\n\r\n  if(!confirmed || !recovered || !deaths || !lastUpdate){\r\n    return 'Loading... ';\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx( styles.card, styles.infected )}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom> Infectados </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={ confirmed.value }\r\n                duration={2.5}\r\n                separator=\",\"\r\n              ></CountUp>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">Números de infectados de COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx( styles.card, styles.recovered )}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom> Recuperados </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={ recovered.value }\r\n                duration={2.5}\r\n                separator=\",\"\r\n              ></CountUp>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">Números de personas recuperadas de COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx( styles.card, styles.deaths )}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom> Fallecidos </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={ deaths.value }\r\n                duration={2.5}\r\n                separator=\",\"\r\n              ></CountUp>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">Números de fallecidos por COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl);\r\n\r\n    return {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate\r\n    };\r\n    \r\n  } catch(err) {\r\n    console.log(err)\r\n  }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData=> ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate\r\n    })))\r\n\r\n    return modifiedData;\r\n  } catch (err) {\r\n    \r\n  }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries }} = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country)=> country.name );\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n\r\n  const [ dailyData, setDailyData ] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      const initialData = await fetchDailyData();\r\n\r\n      setDailyData(initialData);\r\n    }\r\n\r\n    fetchApi();\r\n  }, [])\r\n\r\n  const lineChart = (\r\n    \r\n    dailyData.length\r\n      ?\r\n        <Line\r\n          data={{\r\n            labels: dailyData.map(({ date }) => date ),\r\n            datasets: [{\r\n              data: dailyData.map(({ confirmed }) => confirmed ),\r\n              label: 'Infectados',\r\n              borderColor: '#3333ff',\r\n              fill: true\r\n            }, {\r\n              data: dailyData.map(({ deaths }) => deaths ),\r\n              label: 'Fallecidos',\r\n              borderColor: 'red',\r\n              backgroundColor: 'rgba(255,0,0,0.5)',\r\n              fill: true\r\n            }]\r\n          }}\r\n        ></Line>\r\n      : null\r\n  );\r\n\r\n  const barChar = (\r\n    confirmed\r\n      ? (\r\n          <Bar\r\n            data={{\r\n              labels: ['Infectados', 'Recuperados', 'Fallecidos'],\r\n              datasets: [{\r\n                label: 'Personas',\r\n                backgroundColor: ['rgba(0,0,255,0.5', 'rgba(0,255,0,0.5', 'rgba(255,0,0,0.5'],\r\n                data: [ confirmed.value, recovered.value, deaths.value ],\r\n              }],\r\n            }}\r\n            options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Estado actual en ${country} ` }\r\n            }}\r\n          ></Bar>\r\n        )\r\n      : null\r\n  )\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      { country ? barChar : lineChart }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n\r\n  const [ fetchedCountries, setFetchedCountries ] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    const fetchApi = async () =>{\r\n      const initialData = await fetchCountries();\r\n\r\n      setFetchedCountries(initialData);\r\n    }\r\n\r\n    fetchApi();\r\n  }, [ setFetchedCountries ])\r\n\r\n  return (\r\n    <FormControl className={styles.FormControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={ (e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        { fetchedCountries.map((country, i)=> <option key={i} value={country}>{country}</option>) }\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default CountryPicker;","import React, { Component } from 'react';\r\n\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport styles from  './App.module.css';\r\nimport { fetchData } from './api';\r\n\r\nimport coronaImage from './images/image.png';\r\n  \r\nexport default class App extends Component {\r\n\r\n  state = {\r\n    data: {},\r\n    country: ''\r\n  }\r\n\r\n  async componentDidMount() {\r\n    \r\n    const fetchedData = await fetchData();\r\n\r\n    this.setState({\r\n      data: fetchedData\r\n    });\r\n  };\r\n\r\n  handleCountryChange = async (country) => {\r\n\r\n    // console.log(country)\r\n\r\n    const fetchedData = await fetchData(country);\r\n\r\n    // console.log(fetchedData)\r\n\r\n    this.setState({\r\n      data: fetchedData,\r\n      country\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const { data, country } = this.state;\r\n\r\n    return (\r\n      <div className={styles.container}>\r\n        <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <br />\r\n        <Chart data={data} country={country}/>\r\n    </div>\r\n    )\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2uGj6\",\"image\":\"App_image__bIkLB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__OPKKK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1Rieq\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}